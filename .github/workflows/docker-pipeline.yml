name: my github pipeline

on:
  push:
    branches:
      - main  # or the branch you want to trigger the workflow on ,

jobs:

  codeql_scan:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

    - name: Upload CodeQL results
      uses: actions/upload-artifact@v2
      with:
        name: codeql-results
        path: ${{ runner.workspace }}/results




  build:
    needs: codeql_scan
    runs-on: ubuntu-latest

    env:
      DOCKERHUB_USERNAME: 'mutuwa12'
      DOCKERHUB_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      imagename: 'devsecops_github'
      registry: 'docker.io'
      imageTag: 'latest'
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      REMOTE_USER: 'ubuntu'
      SERVER_IP: '54.226.107.81'
      CONTAINER_NAME: 'devsecops'

    steps:
      - name: Checkout Code Mutuwa code
        uses: actions/checkout@v2

      - name: Build Noble Django Docker Image
        run: |
          echo "DOCKERHUB_USERNAME: $DOCKER_USERNAME"
          echo "DOCKERHUB_PASSWORD: ***"
          echo "imagename: $imagename"
          echo "registry: $registry"
          echo "imageTag: $imageTag"
          echo "SSH_PRIVATE_KEY: ***"
          echo "REMOTE_USER: $REMOTE_USER"
          echo "SERVER_IP: $SERVER_IP"
          echo "CONTAINER_NAME: $CONTAINER_NAME"
          docker build -t ${registry}/${DOCKERHUB_USERNAME}/${imagename}:${imageTag} .

      - name: Push Docker Image to Docker Hub
        run: |
          echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
          docker push ${registry}/${DOCKERHUB_USERNAME}/${imagename}:${imageTag}

  trivy_scan:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install Trivy
        run: |
          wget https://github.com/aquasecurity/trivy/releases/download/v0.18.3/trivy_0.18.3_Linux-64bit.deb
          sudo dpkg -i trivy_0.18.3_Linux-64bit.deb

      - name: Scan Docker Image
        run: |
          trivy_report=$(trivy --format json docker.io/mutuwa12/devsecops_github:latest)
          echo "$trivy_report"

          # Check if there are any vulnerabilities with severity "CRITICAL"
          if echo "$trivy_report" | jq '.[0].Vulnerabilities[] | select(.Severity == "CRITICAL")' > /dev/null; then
            echo "Critical vulnerabilities found. Failing the workflow."
            exit 1
          else
            echo "No critical vulnerabilities found. Proceeding with the workflow."
          fi   


  deploy:
    needs: trivy_scan
    runs-on: ubuntu-latest

    steps:

      - name: Deploy to my serer
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.HOST_DNS }}
          REMOTE_USER: ${{ secrets.USERNAME }}
          TARGET: ${{ secrets.TARGET_DIR }}

      - name: Executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker stop devsecops  || true
            docker rm devsecops || true
            docker pull docker.io/mutuwa12/devsecops_github:latest
            docker run -d --name devsecops -p 8000:8000 docker.io/mutuwa12/devsecops_github:latest
            






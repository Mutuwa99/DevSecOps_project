name: my github pipeline

on:
  push:
    branches:
      - main  # or the branch you want to trigger the workflow on

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      DOCKERHUB_USERNAME: 'mutuwa12'
      DOCKERHUB_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      imagename: 'devsecops_github'
      registry: 'docker.io'
      imageTag: 'latest'
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      REMOTE_USER: 'ubuntu'
      SERVER_IP: '54.226.107.81'
      CONTAINER_NAME: 'devsecops'

    steps:
      - name: Checkout Code Mutuwa code
        uses: actions/checkout@v2

      # - name: Build Noble Django Docker Image
      #   run: |
      #     echo "DOCKERHUB_USERNAME: $DOCKER_USERNAME"
      #     echo "DOCKERHUB_PASSWORD: ***"
      #     echo "imagename: $imagename"
      #     echo "registry: $registry"
      #     echo "imageTag: $imageTag"
      #     echo "SSH_PRIVATE_KEY: ***"
      #     echo "REMOTE_USER: $REMOTE_USER"
      #     echo "SERVER_IP: $SERVER_IP"
      #     echo "CONTAINER_NAME: $CONTAINER_NAME"
      #     docker build -t ${registry}/${DOCKERHUB_USERNAME}/${imagename}:${imageTag} .

      # - name: Push Docker Image to Docker Hub
      #   run: |
      #     echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
      #     docker push ${registry}/${DOCKERHUB_USERNAME}/${imagename}:${imageTag}


  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:

    - name: Set up SSH
      uses: easingthemes/ssh-agent@v0.5.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy to EC2 using Rsync
      uses: easingthemes/rsync-deploy@v1.0.0
      with:
        REMOTE_HOST: ${{ secrets.SERVER_IP }}
        REMOTE_USER: ${{ secrets.REMOTE_USER }}
        REMOTE_PORT: 22
        SOURCE: .  # Assuming you want to sync the entire project directory
        TARGET: /home/ubuntu/DevSecOps_project  # Adjust the target directory
        ARGS: -avz --delete
        EXCLUDE: '.git'  # Exclude folders you don't want to sync

    - name: SSH into EC2
      run: |
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@${{ secrets.SERVER_IP }} "\
          docker pull ${registry}/${DOCKERHUB_USERNAME}/${imagename}:${imageTag} && \
          docker stop ${CONTAINER_NAME} || true && \
          docker rm ${CONTAINER_NAME} || true && \
          docker run -d --name ${CONTAINER_NAME} -p 8000:8000 ${registry}/${DOCKERHUB_USERNAME}/${imagename}:${imageTag}"




